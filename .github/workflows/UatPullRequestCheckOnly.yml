name: Uat-Pull-Request-Check-Only
on:
  pull_request:
    types: [opened, ready_for_review, reopened]
    branches: [UAT]
jobs:
  UatPullRequestCheckOnly:
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
      - name: Checking the branch and the package file
        run: |
          fullName=${{github.head_ref}}
          echo "Full branch name ${fullName}"
          feature="feature"
          release="release"
          bugfix="bugfix"
          hotfix="hotfix"
          if [[ "$fullName" == *"$feature"* ]]
          then
            subString="$feature"
          elif [[ "$fullName" == *"$release"* ]]
          then
            subString="$release"
          elif [[ "$fullName" == *"$bugfix"* ]]
          then
            subString="$bugfix"
          else
            subString="$hotfix"
          fi
          subString="$subString/"
          echo "subString $subString"
          reducedName=$(echo $fullName | grep -o "$subString.*")
          echo "Reduced name" $reducedName
          finalBranchName=$(echo $reducedName | grep -o "/.*")
          finalBranchName=${finalBranchName:1}
          echo "Final branch name" $finalBranchName

          packageFileName="manifest/package-$finalBranchName.xml"
          echo "package File Name $packageFileName"
          echo "Checking if the package exists"
          if [[ -f $packageFileName  ]]; then
            echo "The package file exist, continuing the process!"
          else
            echo "The package file does not exist, the process will fail!"
            exit 1
          fi

          echo "Check if exists any destructive change to run"
          destructivePreName="manifestDestructive/packagePre-$finalBranchName.xml"
          destructivePosName="manifestDestructive/packagePos-$finalBranchName.xml"

          if [[ -f $destructivePreName ]]; then
            echo "Destructive Pre File Name found $destructivePreName"
            DESTRUCTIVE_PRE_DEPLOY=$destructivePreName
          else
            DESTRUCTIVE_PRE_DEPLOY=""
          fi

          if [[ -f $destructivePosName ]]; then
            echo "Destructive Pos File Name found $destructivePosName"
            DESTRUCTIVE_POS_DEPLOY=$destructivePosName
          else
            DESTRUCTIVE_POS_DEPLOY=""
          fi

          echo "DESTRUCTIVE_PRE_DEPLOY=$DESTRUCTIVE_PRE_DEPLOY" >> $GITHUB_ENV;
          echo "DESTRUCTIVE_POS_DEPLOY=$DESTRUCTIVE_POS_DEPLOY" >> $GITHUB_ENV;
          echo "PACKAGE_FILE_NAME=$packageFileName" >> $GITHUB_ENV;
      - name: Install sfdx CLI
        run: npm install sfdx-cli --global
      - name: Check CLI the version
        run: sfdx -v
      - name: Installing xml2js
        run: npm install xml2js
      - name: Reading package test classes
        run: |
          SFDX_SPECIFIC_TEST_FOUND=$(node ./scripts/js/readApexTestClass.js "${{ env.PACKAGE_FILE_NAME }}");
          echo "SFDX_SPECIFIC_TEST_FOUND=$SFDX_SPECIFIC_TEST_FOUND" >> $GITHUB_ENV;
      - name: Defining the test command
        run: |
          if [ -z "${{ env.SFDX_SPECIFIC_TEST_FOUND }}" ]
          then
            echo "There is no test classes"
            SFDX_RUN_TEST_LEVEL="-l NoTestRun"
          else
            SFDX_RUN_TEST_LEVEL="-l RunSpecifiedTests -r ${{ env.SFDX_SPECIFIC_TEST_FOUND }}"
          fi
          echo "SFDX_RUN_TEST_LEVEL=$SFDX_RUN_TEST_LEVEL" >> $GITHUB_ENV;
      - name: Printing specific test classes found
        run: |
          echo "Specific test classes to run: ${{ env.SFDX_RUN_TEST_LEVEL }}"
      - name: Login in the environment
        env:
          UAT_USER_ADMIN: ${{ secrets.UAT_USER_ADMIN }}
          UAT_CONSUMER_KEY: ${{ secrets.UAT_CONSUMER_KEY }}
          UAT_SANDBOX_INSTANCE_URL: ${{ secrets.UAT_SANDBOX_INSTANCE_URL }}
          SERVER_KEY_CERTIFICATE: ${{ secrets.SERVER_KEY_CERTIFICATE }}
        run: |
          echo "$SERVER_KEY_CERTIFICATE" > ./JWT/connectionFile
          sfdx auth:jwt:grant -i $UAT_CONSUMER_KEY -f JWT/connectionFile -u $UAT_USER_ADMIN -s -r $UAT_SANDBOX_INSTANCE_URL -a DeploymetOrg
          rm -rf JWT
      - name: Destructive Pre deployment steps
        run: |
          if [[ -z "${{ env.DESTRUCTIVE_PRE_DEPLOY }}" ]]; then
            echo "No destructive pre deployment steps defined!"
          else
            echo "Doing the destructive pre deployment for real"
            rm -rf Deploy
            mkdir Deploy
            cp manifestDestructive/package.xml Deploy/package.xml 
            cp "${{ env.DESTRUCTIVE_PRE_DEPLOY }}" Deploy/destructiveChanges.xml
            sfdx force:mdapi:deploy -u DeploymetOrg -d Deploy -g -w -1
          fi
      - name: Removing existing older folder
        run: rm -rf Deploy
      - name: Converting the package
        run: sfdx force:source:convert -r force-app/ -d Deploy -x "${{ env.PACKAGE_FILE_NAME }}"
      - name: Running the validation
        if: github.event.pull_request.merged == false
        run: |
          echo "Doing the validation in the environment"
          sfdx force:mdapi:deploy -c -d Deploy/ -w -1 ${{ env.SFDX_RUN_TEST_LEVEL }}
      - name: Destructive Post deployment steps
        run: |
          if [[ -z "${{ env.DESTRUCTIVE_POS_DEPLOY }}" ]]; then
            echo "No destructive pos deployment steps defined!"
          else
            echo "Doing the destructive post deployment for real"
            rm -rf Deploy
            mkdir Deploy
            cp manifestDestructive/package.xml Deploy/package.xml 
            cp "${{ env.DESTRUCTIVE_POS_DEPLOY }}" Deploy/destructiveChanges.xml
            sfdx force:mdapi:deploy -u DeploymetOrg -d Deploy -g -w -1
          fi