name: Prod-Pull-Request-CheckOnly
on:
  pull_request:
    types: [opened, ready_for_review, reopened, synchronize]
    branches: [main]
jobs:
  ProdPullRequestCheckOnly:
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Checking the branch and the package file
        run: |
          fullName=${{github.head_ref}}
          echo "Full branch name ${fullName}"
          feature="feature"
          release="release"
          bugfix="bugfix"
          hotfix="hotfix"
          if [[ "$fullName" == *"$feature"* ]]
          then
            subString="$feature"
          elif [[ "$fullName" == *"$release"* ]]
          then
            subString="$release"
          elif [[ "$fullName" == *"$bugfix"* ]]
          then
            subString="$bugfix"
          else
            subString="$hotfix"
          fi
          subString="$subString/"
          echo "subString $subString"
          reducedName=$(echo $fullName | grep -o "$subString.*")
          echo "Reduced name" $reducedName
          finalBranchName=$(echo $reducedName | grep -o "/.*")
          finalBranchName=${finalBranchName:1}
          echo "Final branch name" $finalBranchName

          packageFileName="manifest/package-$finalBranchName.xml"
          # packageTest-[Ticket or branch name].xml
          packageTestFileName="manifest/packageTest-$finalBranchName.xml"
          echo "Package file name $packageFileName"
          echo "Test package file name $packageTestFileName"

          echo "Checking if the package exists"
          if [[ -f $packageFileName  ]]; then
            echo "The package file exist, continuing the process!"
          else
            echo "The package file does not exist, the process will fail!"
            exit 1
          fi

          echo "Check if exists any destructive change to run"
          destructivePreName="manifestDestructive/packagePre-$finalBranchName.xml"
          destructivePosName="manifestDestructive/packagePos-$finalBranchName.xml"

          if [[ -f $destructivePreName ]]; then
            echo "Destructive Pre File Name found $destructivePreName"
            DESTRUCTIVE_PRE_DEPLOY=$destructivePreName
          else
            DESTRUCTIVE_PRE_DEPLOY=""
          fi

          if [[ -f $destructivePosName ]]; then
            echo "Destructive Pos File Name found $destructivePosName"
            DESTRUCTIVE_POS_DEPLOY=$destructivePosName
          else
            DESTRUCTIVE_POS_DEPLOY=""
          fi

          echo "DESTRUCTIVE_PRE_DEPLOY=$DESTRUCTIVE_PRE_DEPLOY" >> $GITHUB_ENV;
          echo "DESTRUCTIVE_POS_DEPLOY=$DESTRUCTIVE_POS_DEPLOY" >> $GITHUB_ENV;
          echo "PACKAGE_FILE_NAME=$packageFileName" >> $GITHUB_ENV;
          echo "TEST_PACKAGE_FILE_NAME=$packageTestFileName" >> $GITHUB_ENV;

      - name: Installing xml2js
        run: npm install xml2js
  
      - name: Reading package test classes
        run: |
          node ./scripts/js/readNamedApexTestClass.js "${{ env.PACKAGE_FILE_NAME }}" "${{ env.TEST_PACKAGE_FILE_NAME }}"
      - name: Check if process should continue
        run: |
          if [ "${{ env.CONTINUE_PROCESS }}" == "Is missing" ]
          then
            echo "Process needs to stop due to missing test package file ${{ env.TEST_PACKAGE_FILE_NAME }}."
            echo "The possibilities are:"
            echo "1 - You don't have created the ${{ env.TEST_PACKAGE_FILE_NAME }} file"
            echo "2 - You don't have the test classes at the classes folder"
            echo "3 - The content in the ${{ env.TEST_PACKAGE_FILE_NAME }} is not really test class"
            exit 1
          fi

          echo "Test package file ${{ env.TEST_PACKAGE_FILE_NAME }} ${{ env.CONTINUE_PROCESS }}."

          echo "The tests that were found ${{ env.SFDX_SPECIFIC_TEST_FOUND }}"

      - name: Defining the test command
        run: |
          if [ -z "${{ env.SFDX_SPECIFIC_TEST_FOUND }}" ]
          then
            echo "There is no test classes"
            SFDX_RUN_TEST_LEVEL="-l NoTestRun"
          else
            SFDX_RUN_TEST_LEVEL="-l RunSpecifiedTests --tests ${{ env.SFDX_SPECIFIC_TEST_FOUND }}"
          fi
          echo "SFDX_RUN_TEST_LEVEL=$SFDX_RUN_TEST_LEVEL" >> $GITHUB_ENV;
      - name: Printing specific test classes found
        run: |
          echo "Specific test classes to run: ${{ env.SFDX_RUN_TEST_LEVEL }}"

      - name: Install sfdx CLI
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz -q
          mkdir sfdx
          tar xJf sfdx-linux-x64.tar.xz -C sfdx --strip-components 1
          echo "sfdx/bin" >> $GITHUB_PATH

      - name: Login in the environment
        env:
          DEPLOYMENT_USER: ${{ secrets.PROD_USER_ADMIN }}
          CONSUMER_KEY: ${{ secrets.PROD_CONSUMER_KEY }}
          INSTANCE_URL: ${{ secrets.PROD_INSTANCE_URL }}
          SERVER_KEY_CERTIFICATE: ${{ secrets.SERVER_KEY_CERTIFICATE }}
        run: |
          mkdir -p JWT
          echo "$SERVER_KEY_CERTIFICATE" > ./JWT/connectionFile
          sf org login jwt --client-id $CONSUMER_KEY --jwt-key-file JWT/connectionFile --username $DEPLOYMENT_USER --set-default --instance-url $INSTANCE_URL --alias DeploymetOrg
          rm -rf JWT
      - name: Running the validation
        if: github.event.pull_request.merged == false
        run: |
          echo "Check CLI the version"
          sf -v

          rm -rf Deploy
          mkdir Deploy

          if [[ -z "${{ env.DESTRUCTIVE_PRE_DEPLOY }}" ]]; then
            echo "No destructive pre deployment steps defined!"
          else
            echo "Creating the destructive pre deployment for real"
            destructivePreFileName="Deploy/destructiveChangesPre.xml"
            cp "${{ env.DESTRUCTIVE_PRE_DEPLOY }}" "$destructivePreFileName"

            FINAL_DESTRUCTIVE_PRE_DEPLOY="--pre-destructive-changes $destructivePreFileName"
          fi
          echo "FINAL_DESTRUCTIVE_PRE_DEPLOY = $FINAL_DESTRUCTIVE_PRE_DEPLOY"

          sf project deploy start --dry-run --manifest "${{ env.PACKAGE_FILE_NAME }}" -w 60 ${{ env.SFDX_RUN_TEST_LEVEL }} ${FINAL_DESTRUCTIVE_PRE_DEPLOY} 